variables:
  DOCKER_DRIVER: overlay
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ''

stages:
  - test
  - install

sonarcloud-check:
  stage: test
  tags:
    - ops
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner



deploy_development:
  image: docker:dind
  stage: install
  environment: Development
  services:
    - docker:dind
  tags:
    - ops
  script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws --version
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_ACCOUNT}
    - docker build -t ${ECR_ACCOUNT}/${ECR_REPO}:dev-${CI_COMMIT_SHORT_SHA} .
    - docker push ${ECR_ACCOUNT}/${ECR_REPO}:dev-${CI_COMMIT_SHORT_SHA}
  only:
    - develop

deploy_staging:
  image: docker:dind
  stage: install
  environment: Staging
  services:
    - docker:dind
  tags:
    - ops
  script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws --version
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_ACCOUNT}
    - docker build -t ${ECR_ACCOUNT}/${ECR_REPO}:stg-${CI_COMMIT_SHORT_SHA} .
    - docker push ${ECR_ACCOUNT}/${ECR_REPO}:stg-${CI_COMMIT_SHORT_SHA}
  only:
    - /release\/*/

dockerize_production:
  image: docker:dind
  stage: install
  environment: Production
  services:
    - docker:dind
  tags:
    - ops
  script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws --version
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_ACCOUNT}
    - docker build -t ${ECR_ACCOUNT}/${ECR_REPO}:${CI_COMMIT_REF_NAME} .
    - docker push ${ECR_ACCOUNT}/${ECR_REPO}:${CI_COMMIT_REF_NAME}
  only:
    - tags




